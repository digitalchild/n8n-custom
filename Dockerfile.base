ARG NODE_VERSION=20

# Use Debian as the base image
FROM node:${NODE_VERSION}-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install essential system dependencies for n8n
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        git \
        openssh-client \
        graphicsmagick \
        tini \
        ca-certificates \
        jq \
        wget \
        tzdata \
        fontconfig \
        openssl \
    && rm -rf /var/lib/apt/lists/*

# Update npm and install full-icu
RUN npm install -g corepack@0.31 full-icu@1.5.0

# Activate corepack, and install pnpm
WORKDIR /tmp
COPY package.json ./
RUN corepack enable && corepack prepare --activate

# Install n8n
ARG N8N_VERSION=latest
ENV N8N_VERSION=${N8N_VERSION}
ENV NODE_ENV=production
ENV N8N_RELEASE_TYPE=stable
ENV NODE_ICU_DATA=/usr/local/lib/node_modules/full-icu

RUN if [ "$N8N_VERSION" = "latest" ]; then \
        npm install -g --omit=dev n8n --ignore-scripts; \
    else \
        npm install -g --omit=dev n8n@${N8N_VERSION} --ignore-scripts; \
    fi && \
    npm rebuild --prefix=/usr/local/lib/node_modules/n8n sqlite3 && \
    # Cleanup unnecessary files to reduce image size
    rm -rf /usr/local/lib/node_modules/n8n/node_modules/@n8n/chat && \
    rm -rf /usr/local/lib/node_modules/n8n/node_modules/@n8n/design-system && \
    rm -rf /usr/local/lib/node_modules/n8n/node_modules/n8n-editor-ui/node_modules && \
    find /usr/local/lib/node_modules/n8n -type f -name "*.ts" -o -name "*.js.map" -o -name "*.vue" | xargs rm -f && \
    rm -rf /root/.npm

# Install Playwright and its dependencies using Playwright's own scripts
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && npx playwright install-deps \
    && npx playwright install chromium firefox


# Install ffmpeg
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Setup the Task Runner Launcher
ARG TARGETPLATFORM
ARG LAUNCHER_VERSION=1.1.1
COPY n8n-task-runners.json /etc/n8n-task-runners.json
# Download, verify, then extract the launcher binary
RUN \
    mkdir /launcher-temp && \
    cd /launcher-temp && \
    if [ -z "$TARGETPLATFORM" ] || [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
        export ARCH_NAME="amd64"; \
    elif [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        export ARCH_NAME="arm64"; \
    fi && \
    wget https://github.com/n8n-io/task-runner-launcher/releases/download/${LAUNCHER_VERSION}/task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz && \
    wget https://github.com/n8n-io/task-runner-launcher/releases/download/${LAUNCHER_VERSION}/task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz.sha256 && \
    # The .sha256 does not contain the filename --> Form the correct checksum file
    echo "$(cat task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz.sha256) task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz" > checksum.sha256 && \
    sha256sum -c checksum.sha256 && \
    tar xvf task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz --directory=/usr/local/bin && \
    cd - && \
    rm -r /launcher-temp

# Copy the official docker-entrypoint.sh
COPY docker-entrypoint.sh /

# Create .n8n directory and set permissions
RUN mkdir -p /home/node/.n8n && \
    chown -R node:node /home/node/.n8n

# Set working directory and user
WORKDIR /home/node
ENV SHELL /bin/sh
USER node

# Expose port for n8n
EXPOSE 5678

ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]